/*
 * This file is generated by jOOQ.
 */
package io.github.lubosgarancovsky.aurora.repository.model.tables;


import io.github.lubosgarancovsky.aurora.repository.model.Keys;
import io.github.lubosgarancovsky.aurora.repository.model.Public;
import io.github.lubosgarancovsky.aurora.repository.model.tables.records.SubstoriesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Substories extends TableImpl<SubstoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.substories</code>
     */
    public static final Substories SUBSTORIES = new Substories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubstoriesRecord> getRecordType() {
        return SubstoriesRecord.class;
    }

    /**
     * The column <code>public.substories.id</code>.
     */
    public final TableField<SubstoriesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.substories.parent_id</code>.
     */
    public final TableField<SubstoriesRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.substories.name</code>.
     */
    public final TableField<SubstoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.substories.description</code>.
     */
    public final TableField<SubstoriesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.substories.code</code>.
     */
    public final TableField<SubstoriesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.substories.state_id</code>.
     */
    public final TableField<SubstoriesRecord, UUID> STATE_ID = createField(DSL.name("state_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.substories.type_id</code>.
     */
    public final TableField<SubstoriesRecord, UUID> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.substories.created_by</code>.
     */
    public final TableField<SubstoriesRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.substories.assigned_to</code>.
     */
    public final TableField<SubstoriesRecord, UUID> ASSIGNED_TO = createField(DSL.name("assigned_to"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.substories.created_at</code>.
     */
    public final TableField<SubstoriesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Substories(Name alias, Table<SubstoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Substories(Name alias, Table<SubstoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.substories</code> table reference
     */
    public Substories(String alias) {
        this(DSL.name(alias), SUBSTORIES);
    }

    /**
     * Create an aliased <code>public.substories</code> table reference
     */
    public Substories(Name alias) {
        this(alias, SUBSTORIES);
    }

    /**
     * Create a <code>public.substories</code> table reference
     */
    public Substories() {
        this(DSL.name("substories"), null);
    }

    public <O extends Record> Substories(Table<O> child, ForeignKey<O, SubstoriesRecord> key) {
        super(child, key, SUBSTORIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SubstoriesRecord> getPrimaryKey() {
        return Keys.SUBSTORIES_PKEY;
    }

    @Override
    public List<ForeignKey<SubstoriesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUBSTORIES__SUBSTORIES_PARENT_ID_FKEY, Keys.SUBSTORIES__SUBSTORIES_STATE_ID_FKEY, Keys.SUBSTORIES__SUBSTORIES_TYPE_ID_FKEY, Keys.SUBSTORIES__SUBSTORIES_CREATED_BY_FKEY, Keys.SUBSTORIES__SUBSTORIES_ASSIGNED_TO_FKEY);
    }

    private transient Stories _stories;
    private transient StoryState _storyState;
    private transient StoryType _storyType;
    private transient Partners _substoriesCreatedByFkey;
    private transient Partners _substoriesAssignedToFkey;

    /**
     * Get the implicit join path to the <code>public.stories</code> table.
     */
    public Stories stories() {
        if (_stories == null)
            _stories = new Stories(this, Keys.SUBSTORIES__SUBSTORIES_PARENT_ID_FKEY);

        return _stories;
    }

    /**
     * Get the implicit join path to the <code>public.story_state</code> table.
     */
    public StoryState storyState() {
        if (_storyState == null)
            _storyState = new StoryState(this, Keys.SUBSTORIES__SUBSTORIES_STATE_ID_FKEY);

        return _storyState;
    }

    /**
     * Get the implicit join path to the <code>public.story_type</code> table.
     */
    public StoryType storyType() {
        if (_storyType == null)
            _storyType = new StoryType(this, Keys.SUBSTORIES__SUBSTORIES_TYPE_ID_FKEY);

        return _storyType;
    }

    /**
     * Get the implicit join path to the <code>public.partners</code> table, via
     * the <code>substories_created_by_fkey</code> key.
     */
    public Partners substoriesCreatedByFkey() {
        if (_substoriesCreatedByFkey == null)
            _substoriesCreatedByFkey = new Partners(this, Keys.SUBSTORIES__SUBSTORIES_CREATED_BY_FKEY);

        return _substoriesCreatedByFkey;
    }

    /**
     * Get the implicit join path to the <code>public.partners</code> table, via
     * the <code>substories_assigned_to_fkey</code> key.
     */
    public Partners substoriesAssignedToFkey() {
        if (_substoriesAssignedToFkey == null)
            _substoriesAssignedToFkey = new Partners(this, Keys.SUBSTORIES__SUBSTORIES_ASSIGNED_TO_FKEY);

        return _substoriesAssignedToFkey;
    }

    @Override
    public Substories as(String alias) {
        return new Substories(DSL.name(alias), this);
    }

    @Override
    public Substories as(Name alias) {
        return new Substories(alias, this);
    }

    @Override
    public Substories as(Table<?> alias) {
        return new Substories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Substories rename(String name) {
        return new Substories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Substories rename(Name name) {
        return new Substories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Substories rename(Table<?> name) {
        return new Substories(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, String, String, String, UUID, UUID, UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super UUID, ? super UUID, ? super String, ? super String, ? super String, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super UUID, ? super UUID, ? super String, ? super String, ? super String, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
