/*
 * This file is generated by jOOQ.
 */
package io.github.lubosgarancovsky.aurora.repository.model.tables;


import io.github.lubosgarancovsky.aurora.repository.model.Keys;
import io.github.lubosgarancovsky.aurora.repository.model.Public;
import io.github.lubosgarancovsky.aurora.repository.model.tables.records.StoriesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Stories extends TableImpl<StoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.stories</code>
     */
    public static final Stories STORIES = new Stories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoriesRecord> getRecordType() {
        return StoriesRecord.class;
    }

    /**
     * The column <code>public.stories.id</code>.
     */
    public final TableField<StoriesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.stories.name</code>.
     */
    public final TableField<StoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.stories.description</code>.
     */
    public final TableField<StoriesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.stories.code</code>.
     */
    public final TableField<StoriesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.stories.in_board</code>.
     */
    public final TableField<StoriesRecord, Boolean> IN_BOARD = createField(DSL.name("in_board"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.stories.project_id</code>.
     */
    public final TableField<StoriesRecord, UUID> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.stories.state_id</code>.
     */
    public final TableField<StoriesRecord, UUID> STATE_ID = createField(DSL.name("state_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.stories.type_id</code>.
     */
    public final TableField<StoriesRecord, UUID> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.stories.created_by</code>.
     */
    public final TableField<StoriesRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.stories.assigned_to</code>.
     */
    public final TableField<StoriesRecord, UUID> ASSIGNED_TO = createField(DSL.name("assigned_to"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.stories.created_at</code>.
     */
    public final TableField<StoriesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Stories(Name alias, Table<StoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stories(Name alias, Table<StoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.stories</code> table reference
     */
    public Stories(String alias) {
        this(DSL.name(alias), STORIES);
    }

    /**
     * Create an aliased <code>public.stories</code> table reference
     */
    public Stories(Name alias) {
        this(alias, STORIES);
    }

    /**
     * Create a <code>public.stories</code> table reference
     */
    public Stories() {
        this(DSL.name("stories"), null);
    }

    public <O extends Record> Stories(Table<O> child, ForeignKey<O, StoriesRecord> key) {
        super(child, key, STORIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<StoriesRecord> getPrimaryKey() {
        return Keys.STORIES_PKEY;
    }

    @Override
    public List<ForeignKey<StoriesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STORIES__STORIES_PROJECT_ID_FKEY, Keys.STORIES__STORIES_STATE_ID_FKEY, Keys.STORIES__STORIES_TYPE_ID_FKEY, Keys.STORIES__STORIES_CREATED_BY_FKEY, Keys.STORIES__STORIES_ASSIGNED_TO_FKEY);
    }

    private transient Projects _projects;
    private transient StoryState _storyState;
    private transient StoryType _storyType;
    private transient Partners _storiesCreatedByFkey;
    private transient Partners _storiesAssignedToFkey;

    /**
     * Get the implicit join path to the <code>public.projects</code> table.
     */
    public Projects projects() {
        if (_projects == null)
            _projects = new Projects(this, Keys.STORIES__STORIES_PROJECT_ID_FKEY);

        return _projects;
    }

    /**
     * Get the implicit join path to the <code>public.story_state</code> table.
     */
    public StoryState storyState() {
        if (_storyState == null)
            _storyState = new StoryState(this, Keys.STORIES__STORIES_STATE_ID_FKEY);

        return _storyState;
    }

    /**
     * Get the implicit join path to the <code>public.story_type</code> table.
     */
    public StoryType storyType() {
        if (_storyType == null)
            _storyType = new StoryType(this, Keys.STORIES__STORIES_TYPE_ID_FKEY);

        return _storyType;
    }

    /**
     * Get the implicit join path to the <code>public.partners</code> table, via
     * the <code>stories_created_by_fkey</code> key.
     */
    public Partners storiesCreatedByFkey() {
        if (_storiesCreatedByFkey == null)
            _storiesCreatedByFkey = new Partners(this, Keys.STORIES__STORIES_CREATED_BY_FKEY);

        return _storiesCreatedByFkey;
    }

    /**
     * Get the implicit join path to the <code>public.partners</code> table, via
     * the <code>stories_assigned_to_fkey</code> key.
     */
    public Partners storiesAssignedToFkey() {
        if (_storiesAssignedToFkey == null)
            _storiesAssignedToFkey = new Partners(this, Keys.STORIES__STORIES_ASSIGNED_TO_FKEY);

        return _storiesAssignedToFkey;
    }

    @Override
    public Stories as(String alias) {
        return new Stories(DSL.name(alias), this);
    }

    @Override
    public Stories as(Name alias) {
        return new Stories(alias, this);
    }

    @Override
    public Stories as(Table<?> alias) {
        return new Stories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stories rename(String name) {
        return new Stories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stories rename(Name name) {
        return new Stories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stories rename(Table<?> name) {
        return new Stories(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, String, String, String, Boolean, UUID, UUID, UUID, UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super UUID, ? super String, ? super String, ? super String, ? super Boolean, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super UUID, ? super String, ? super String, ? super String, ? super Boolean, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
