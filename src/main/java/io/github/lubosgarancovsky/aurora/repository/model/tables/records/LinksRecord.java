/*
 * This file is generated by jOOQ.
 */
package io.github.lubosgarancovsky.aurora.repository.model.tables.records;


import io.github.lubosgarancovsky.aurora.repository.model.tables.Links;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LinksRecord extends UpdatableRecordImpl<LinksRecord> implements Record4<UUID, UUID, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.links.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.links.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.links.project_id</code>.
     */
    public void setProjectId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.links.project_id</code>.
     */
    public UUID getProjectId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.links.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.links.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.links.url</code>.
     */
    public void setUrl(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.links.url</code>.
     */
    public String getUrl() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Links.LINKS.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Links.LINKS.PROJECT_ID;
    }

    @Override
    public Field<String> field3() {
        return Links.LINKS.NAME;
    }

    @Override
    public Field<String> field4() {
        return Links.LINKS.URL;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getProjectId();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getUrl();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getProjectId();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getUrl();
    }

    @Override
    public LinksRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public LinksRecord value2(UUID value) {
        setProjectId(value);
        return this;
    }

    @Override
    public LinksRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public LinksRecord value4(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public LinksRecord values(UUID value1, UUID value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LinksRecord
     */
    public LinksRecord() {
        super(Links.LINKS);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    public LinksRecord(UUID id, UUID projectId, String name, String url) {
        super(Links.LINKS);

        setId(id);
        setProjectId(projectId);
        setName(name);
        setUrl(url);
        resetChangedOnNotNull();
    }
}
