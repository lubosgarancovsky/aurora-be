/*
 * This file is generated by jOOQ.
 */
package io.github.lubosgarancovsky.aurora.repository.model.tables.records;


import io.github.lubosgarancovsky.aurora.repository.model.tables.ProjectBoard;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProjectBoardRecord extends UpdatableRecordImpl<ProjectBoardRecord> implements Record3<UUID, UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.project_board.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.project_board.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.project_board.project_id</code>.
     */
    public void setProjectId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.project_board.project_id</code>.
     */
    public UUID getProjectId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.project_board.state_id</code>.
     */
    public void setStateId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.project_board.state_id</code>.
     */
    public UUID getStateId() {
        return (UUID) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, UUID> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return ProjectBoard.PROJECT_BOARD.ID;
    }

    @Override
    public Field<UUID> field2() {
        return ProjectBoard.PROJECT_BOARD.PROJECT_ID;
    }

    @Override
    public Field<UUID> field3() {
        return ProjectBoard.PROJECT_BOARD.STATE_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getProjectId();
    }

    @Override
    public UUID component3() {
        return getStateId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getProjectId();
    }

    @Override
    public UUID value3() {
        return getStateId();
    }

    @Override
    public ProjectBoardRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ProjectBoardRecord value2(UUID value) {
        setProjectId(value);
        return this;
    }

    @Override
    public ProjectBoardRecord value3(UUID value) {
        setStateId(value);
        return this;
    }

    @Override
    public ProjectBoardRecord values(UUID value1, UUID value2, UUID value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjectBoardRecord
     */
    public ProjectBoardRecord() {
        super(ProjectBoard.PROJECT_BOARD);
    }

    /**
     * Create a detached, initialised ProjectBoardRecord
     */
    public ProjectBoardRecord(UUID id, UUID projectId, UUID stateId) {
        super(ProjectBoard.PROJECT_BOARD);

        setId(id);
        setProjectId(projectId);
        setStateId(stateId);
        resetChangedOnNotNull();
    }
}
