/*
 * This file is generated by jOOQ.
 */
package io.github.lubosgarancovsky.aurora.repository.model.tables;


import io.github.lubosgarancovsky.aurora.repository.model.Keys;
import io.github.lubosgarancovsky.aurora.repository.model.Public;
import io.github.lubosgarancovsky.aurora.repository.model.tables.records.TeamPartnerRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamPartner extends TableImpl<TeamPartnerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.team_partner</code>
     */
    public static final TeamPartner TEAM_PARTNER = new TeamPartner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamPartnerRecord> getRecordType() {
        return TeamPartnerRecord.class;
    }

    /**
     * The column <code>public.team_partner.id</code>.
     */
    public final TableField<TeamPartnerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.team_partner.team_id</code>.
     */
    public final TableField<TeamPartnerRecord, UUID> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.team_partner.partner_id</code>.
     */
    public final TableField<TeamPartnerRecord, UUID> PARTNER_ID = createField(DSL.name("partner_id"), SQLDataType.UUID.nullable(false), this, "");

    private TeamPartner(Name alias, Table<TeamPartnerRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamPartner(Name alias, Table<TeamPartnerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.team_partner</code> table reference
     */
    public TeamPartner(String alias) {
        this(DSL.name(alias), TEAM_PARTNER);
    }

    /**
     * Create an aliased <code>public.team_partner</code> table reference
     */
    public TeamPartner(Name alias) {
        this(alias, TEAM_PARTNER);
    }

    /**
     * Create a <code>public.team_partner</code> table reference
     */
    public TeamPartner() {
        this(DSL.name("team_partner"), null);
    }

    public <O extends Record> TeamPartner(Table<O> child, ForeignKey<O, TeamPartnerRecord> key) {
        super(child, key, TEAM_PARTNER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TeamPartnerRecord> getPrimaryKey() {
        return Keys.TEAM_PARTNER_PKEY;
    }

    @Override
    public List<ForeignKey<TeamPartnerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEAM_PARTNER__TEAM_PARTNER_TEAM_ID_FKEY, Keys.TEAM_PARTNER__TEAM_PARTNER_PARTNER_ID_FKEY);
    }

    private transient Teams _teams;
    private transient Partners _partners;

    /**
     * Get the implicit join path to the <code>public.teams</code> table.
     */
    public Teams teams() {
        if (_teams == null)
            _teams = new Teams(this, Keys.TEAM_PARTNER__TEAM_PARTNER_TEAM_ID_FKEY);

        return _teams;
    }

    /**
     * Get the implicit join path to the <code>public.partners</code> table.
     */
    public Partners partners() {
        if (_partners == null)
            _partners = new Partners(this, Keys.TEAM_PARTNER__TEAM_PARTNER_PARTNER_ID_FKEY);

        return _partners;
    }

    @Override
    public TeamPartner as(String alias) {
        return new TeamPartner(DSL.name(alias), this);
    }

    @Override
    public TeamPartner as(Name alias) {
        return new TeamPartner(alias, this);
    }

    @Override
    public TeamPartner as(Table<?> alias) {
        return new TeamPartner(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamPartner rename(String name) {
        return new TeamPartner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamPartner rename(Name name) {
        return new TeamPartner(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamPartner rename(Table<?> name) {
        return new TeamPartner(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
