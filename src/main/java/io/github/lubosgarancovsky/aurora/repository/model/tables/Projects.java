/*
 * This file is generated by jOOQ.
 */
package io.github.lubosgarancovsky.aurora.repository.model.tables;


import io.github.lubosgarancovsky.aurora.repository.model.Keys;
import io.github.lubosgarancovsky.aurora.repository.model.Public;
import io.github.lubosgarancovsky.aurora.repository.model.tables.records.ProjectsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Projects extends TableImpl<ProjectsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.projects</code>
     */
    public static final Projects PROJECTS = new Projects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectsRecord> getRecordType() {
        return ProjectsRecord.class;
    }

    /**
     * The column <code>public.projects.id</code>.
     */
    public final TableField<ProjectsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.projects.name</code>.
     */
    public final TableField<ProjectsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.projects.description</code>.
     */
    public final TableField<ProjectsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.projects.created_by</code>.
     */
    public final TableField<ProjectsRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.projects.created_at</code>.
     */
    public final TableField<ProjectsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.projects.code</code>.
     */
    public final TableField<ProjectsRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    private Projects(Name alias, Table<ProjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projects(Name alias, Table<ProjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.projects</code> table reference
     */
    public Projects(String alias) {
        this(DSL.name(alias), PROJECTS);
    }

    /**
     * Create an aliased <code>public.projects</code> table reference
     */
    public Projects(Name alias) {
        this(alias, PROJECTS);
    }

    /**
     * Create a <code>public.projects</code> table reference
     */
    public Projects() {
        this(DSL.name("projects"), null);
    }

    public <O extends Record> Projects(Table<O> child, ForeignKey<O, ProjectsRecord> key) {
        super(child, key, PROJECTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProjectsRecord> getPrimaryKey() {
        return Keys.PROJECTS_PKEY;
    }

    @Override
    public List<ForeignKey<ProjectsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECTS__PROJECTS_CREATED_BY_FKEY);
    }

    private transient Partners _partners;

    /**
     * Get the implicit join path to the <code>public.partners</code> table.
     */
    public Partners partners() {
        if (_partners == null)
            _partners = new Partners(this, Keys.PROJECTS__PROJECTS_CREATED_BY_FKEY);

        return _partners;
    }

    @Override
    public Projects as(String alias) {
        return new Projects(DSL.name(alias), this);
    }

    @Override
    public Projects as(Name alias) {
        return new Projects(alias, this);
    }

    @Override
    public Projects as(Table<?> alias) {
        return new Projects(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(String name) {
        return new Projects(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(Name name) {
        return new Projects(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(Table<?> name) {
        return new Projects(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, UUID, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super String, ? super UUID, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super String, ? super UUID, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
