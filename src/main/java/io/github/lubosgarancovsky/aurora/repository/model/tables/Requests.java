/*
 * This file is generated by jOOQ.
 */
package io.github.lubosgarancovsky.aurora.repository.model.tables;


import io.github.lubosgarancovsky.aurora.repository.model.Keys;
import io.github.lubosgarancovsky.aurora.repository.model.Public;
import io.github.lubosgarancovsky.aurora.repository.model.tables.records.RequestsRecord;

import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Requests extends TableImpl<RequestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.requests</code>
     */
    public static final Requests REQUESTS = new Requests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestsRecord> getRecordType() {
        return RequestsRecord.class;
    }

    /**
     * The column <code>public.requests.id</code>.
     */
    public final TableField<RequestsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.requests.sender_id</code>.
     */
    public final TableField<RequestsRecord, UUID> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.requests.recipient_id</code>.
     */
    public final TableField<RequestsRecord, UUID> RECIPIENT_ID = createField(DSL.name("recipient_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.requests.team_id</code>.
     */
    public final TableField<RequestsRecord, UUID> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.requests.created_at</code>.
     */
    public final TableField<RequestsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Requests(Name alias, Table<RequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Requests(Name alias, Table<RequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.requests</code> table reference
     */
    public Requests(String alias) {
        this(DSL.name(alias), REQUESTS);
    }

    /**
     * Create an aliased <code>public.requests</code> table reference
     */
    public Requests(Name alias) {
        this(alias, REQUESTS);
    }

    /**
     * Create a <code>public.requests</code> table reference
     */
    public Requests() {
        this(DSL.name("requests"), null);
    }

    public <O extends Record> Requests(Table<O> child, ForeignKey<O, RequestsRecord> key) {
        super(child, key, REQUESTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RequestsRecord> getPrimaryKey() {
        return Keys.REQUESTS_PKEY;
    }

    @Override
    public Requests as(String alias) {
        return new Requests(DSL.name(alias), this);
    }

    @Override
    public Requests as(Name alias) {
        return new Requests(alias, this);
    }

    @Override
    public Requests as(Table<?> alias) {
        return new Requests(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(String name) {
        return new Requests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(Name name) {
        return new Requests(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Requests rename(Table<?> name) {
        return new Requests(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
