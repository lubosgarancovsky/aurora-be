/*
 * This file is generated by jOOQ.
 */
package io.github.lubosgarancovsky.aurora.repository.model.tables;


import io.github.lubosgarancovsky.aurora.repository.model.Keys;
import io.github.lubosgarancovsky.aurora.repository.model.Public;
import io.github.lubosgarancovsky.aurora.repository.model.tables.records.PartnersRecord;

import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Partners extends TableImpl<PartnersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.partners</code>
     */
    public static final Partners PARTNERS = new Partners();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartnersRecord> getRecordType() {
        return PartnersRecord.class;
    }

    /**
     * The column <code>public.partners.id</code>.
     */
    public final TableField<PartnersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.partners.name</code>.
     */
    public final TableField<PartnersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.partners.email</code>.
     */
    public final TableField<PartnersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.partners.password</code>.
     */
    public final TableField<PartnersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.partners.color</code>.
     */
    public final TableField<PartnersRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(7).nullable(false), this, "");

    /**
     * The column <code>public.partners.picture</code>.
     */
    public final TableField<PartnersRecord, String> PICTURE = createField(DSL.name("picture"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.partners.created_at</code>.
     */
    public final TableField<PartnersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.partners.updated_at</code>.
     */
    public final TableField<PartnersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Partners(Name alias, Table<PartnersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Partners(Name alias, Table<PartnersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.partners</code> table reference
     */
    public Partners(String alias) {
        this(DSL.name(alias), PARTNERS);
    }

    /**
     * Create an aliased <code>public.partners</code> table reference
     */
    public Partners(Name alias) {
        this(alias, PARTNERS);
    }

    /**
     * Create a <code>public.partners</code> table reference
     */
    public Partners() {
        this(DSL.name("partners"), null);
    }

    public <O extends Record> Partners(Table<O> child, ForeignKey<O, PartnersRecord> key) {
        super(child, key, PARTNERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PartnersRecord> getPrimaryKey() {
        return Keys.PARTNERS_PKEY;
    }

    @Override
    public Partners as(String alias) {
        return new Partners(DSL.name(alias), this);
    }

    @Override
    public Partners as(Name alias) {
        return new Partners(alias, this);
    }

    @Override
    public Partners as(Table<?> alias) {
        return new Partners(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Partners rename(String name) {
        return new Partners(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partners rename(Name name) {
        return new Partners(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partners rename(Table<?> name) {
        return new Partners(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
